#!/bin/bash
#
# NAME
# backup-website-database.sh - create a tar archive with database dump and website files
#
# SYNOPSIS
#	/path/to/backup-website-database.sh /path/to/backups/example.com/.backup-config
#
# DESCRIPTION
# This script dump the database and create a tar archive from source into destination with database e files.
# To exclude files or directory: create an .excluded file with files and directories list (one for line) into backup
# directory destination.
# 
# INSTALLATION
# -sudo chown -R root: /path/to/backups/example.com (optional to secure database and user password)
# -sudo chmod 600 /path/to/backups/example.com/.backup-config (optional to secure database and user password)
# -edit config parameters
# -sudo chmod 754 /path/to/backup-website-database.sh
# 
# AUTHOR: 
# backup-website-database.sh is written by Alfio Salanitri www.alfiosalanitri.it and are licensed under the MIT License.
if [ ! -f "$1" ]; then
  printf "Type the full/path/to/.backup-config file\n"
  exit 1
fi
readonly CONFIG_FILE=$1
readonly SOURCE_PATH=$(awk -F'=' '/^SOURCE_PATH=/ { print $2}' $CONFIG_FILE)
readonly DEST_PATH=$(awk -F'=' '/^DEST_PATH=/ { print $2}' $CONFIG_FILE)
excluded=''
#if .excluded file exists into backup destination directory
if [ -f "${DEST_PATH}.excluded" ]; then
  excluded="-X ${DEST_PATH}.excluded"
fi
readonly DATABASE_NAME=$(awk -F'=' '/^DATABASE_NAME=/ { print $2}' $CONFIG_FILE)
readonly DATABASE_USER=$(awk -F'=' '/^DATABASE_USER=/ { print $2}' $CONFIG_FILE)
readonly DATABASE_PSW=$(awk -F'=' '/^DATABASE_PSW=/ { print $2}' $CONFIG_FILE)
readonly DATABASE_PORT=$(awk -F'=' '/^DATABASE_PORT=/ { print $2}' $CONFIG_FILE)
readonly DATABASE_HOST=$(awk -F'=' '/^DATABASE_HOST=/ { print $2}' $CONFIG_FILE)
db_dump_args="--no-tablespaces"
# fix mariadb mysqldump Couldn't execute 'SELECT COLUMN_NAME, error
MYSQL_SERVER=$(mysql -u$DATABASE_USER -p$DATABASE_PSW -h $DATABASE_HOST -P $DATABASE_PORT -e "SELECT VERSION();" | grep -iF "maria")
if [ "" != "$MYSQL_SERVER" ]; then
  db_dump_args="--column-statistics=0 --no-tablespaces"
fi
echo "--- Step 1/4 ---"
printf "[ ] Dumping mysql...\n"
mysqldump -u$DATABASE_USER -p$DATABASE_PSW -h $DATABASE_HOST -P $DATABASE_PORT $db_dump_args $DATABASE_NAME > /tmp/$DATABASE_NAME-dump.sql
check_dump=$(cat /tmp/$DATABASE_NAME-dump.sql | tail -1 | grep -iF "completed")
if [ ""  == "$check_dump" ]; then
  printf "[x] Dump database failed.\n"
  exit 1
fi
printf "[v] Database saved!\n"
echo "----------------"
echo ""
echo "--- Step 2/4 ---"
if ls ${DEST_PATH}backup-*.tar.xz &>/dev/null 
then
  printf "[ ] Deleting previews backup...\n"
  rm ${DEST_PATH}backup-*
  printf "[v] Previews backup deleted.\n"
else
  printf "[v] No previews backup founds.\n"
fi
echo "----------------"
echo ""
echo "--- Step 3/4 ---"
printf "[ ] Saving new backup... (this operation will take some minutes)\n"
tar cJfP ${DEST_PATH}backup-$(date +%d%m%Y-%H%M).tar.xz $excluded $SOURCE_PATH /tmp/$DATABASE_NAME-dump.sql
printf "[v] Backup file saved.\n"
echo "----------------"
echo ""
echo "--- Step 4/4 ---"
printf "[ ] Cleaning temp files...\n"
rm /tmp/$DATABASE_NAME-dump.sql
printf "[v] Temp files deleted.\n"
echo "----------------"
echo ""
printf "[v] Backup completed with success!\n"
exit 0
